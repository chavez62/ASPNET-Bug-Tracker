@using BugTracker.Models.Enums
@{
    ViewData["Title"] = "Dashboard";
}

<h1 class="mb-4">Dashboard</h1>

<div class="row">
    <div class="col-md-3">
        <div class="card bg-primary text-white mb-4">
            <div class="card-body">
                <h5 class="card-title">Total Bugs</h5>
                <h2>@(ViewBag.TotalBugs ?? 0)</h2>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-warning text-white mb-4">
            
            @{
                ViewData["Title"] = "Dashboard";
            }

            <h1 class="mb-4">Dashboard</h1>

            <div class="row">
                <div class="col-md-3 col-sm-6">
                    <div class="card bg-primary text-white mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Total Bugs</h5>
                            <h2 id="totalBugs">@(ViewBag.TotalBugs ?? 0)</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6">
                    <div class="card bg-warning text-white mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Open Bugs</h5>
                            <h2 id="openBugs">@(ViewBag.OpenBugs ?? 0)</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6">
                    <div class="card bg-info text-white mb-4">
                        <div class="card-body">
                            <h5 class="card-title">In Progress</h5>
                            <h2 id="inProgressBugs">@(ViewBag.InProgressBugs ?? 0)</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6">
                    <div class="card bg-success text-white mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Resolved</h5>
                            <h2 id="resolvedBugs">@(ViewBag.ResolvedBugs ?? 0)</h2>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-header">
                            Bugs by Status
                        </div>
                        <div class="card-body">
                            <canvas id="statusChart"></canvas>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-header">
                            Bugs by Severity
                        </div>
                        <div class="card-body">
                            <canvas id="severityChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <div id="loading" class="text-center" style="display: none;">
                <div class="spinner-border text-primary" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>

            @section Scripts {
                <script>
                    function fetchData() {
                        document.getElementById('loading').style.display = 'block';
                        document.getElementById('dashboard-content').style.display = 'none';

                        fetch('/api/dashboard-data')
                            .then(response => response.json())
                            .then(data => {
                                updateDashboard(data);
                                document.getElementById('loading').style.display = 'none';
                                document.getElementById('dashboard-content').style.display = 'block';
                            })
                            .catch(error => {
                                console.error('Error fetching data:', error);
                                document.getElementById('loading').style.display = 'none';
                                document.getElementById('dashboard-content').style.display = 'block';
                            });
                    }

                    function updateDashboard(data) {
                        document.getElementById('totalBugs').innerText = data.totalBugs;
                        document.getElementById('openBugs').innerText = data.openBugs;
                        document.getElementById('inProgressBugs').innerText = data.inProgressBugs;
                        document.getElementById('resolvedBugs').innerText = data.resolvedBugs;

                        statusChart.data.labels = data.statusLabels;
                        statusChart.data.datasets[0].data = data.statusData;
                        statusChart.update();

                        severityChart.data.labels = data.severityLabels;
                        severityChart.data.datasets[0].data = data.severityData;
                        severityChart.update();
                    }

                    fetchData();
                    setInterval(fetchData, 60000);
                </script>
                <script>
                    var statusCtx = document.getElementById('statusChart').getContext('2d');
                    var statusLabels = @Html.Raw(Json.Serialize(ViewBag.StatusLabels ?? new List<string>()));
                    var statusData = @Html.Raw(Json.Serialize(ViewBag.StatusData ?? new List<int>()));

                    var statusChart = new Chart(statusCtx, {
                        type: 'pie',
                        data: {
                            labels: statusLabels,
                            datasets: [{
                                data: statusData,
                                backgroundColor: [
                                    '#dc3545', // Open - danger
                                    '#ffc107', // In Progress - warning
                                    '#0dcaf0', // Under Review - info
                                    '#198754', // Resolved - success
                                    '#6c757d'  // Closed - secondary
                                ]
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: {
                                    position: 'bottom'
                                }
                            }
                        }
                    });

                    var severityCtx = document.getElementById('severityChart').getContext('2d');
                    var severityLabels = @Html.Raw(Json.Serialize(ViewBag.SeverityLabels ?? new List<string>()));
                    var severityData = @Html.Raw(Json.Serialize(ViewBag.SeverityData ?? new List<int>()));

                    var severityChart = new Chart(severityCtx, {
                        type: 'bar',
                        data: {
                            labels: severityLabels,
                            datasets: [{
                                label: 'Bugs by Severity',
                                data: severityData,
                                backgroundColor: [
                                    '#6c757d', // Low - secondary
                                    '#0dcaf0', // Medium - info
                                    '#ffc107', // High - warning
                                    '#dc3545'  // Critical - danger
                                ]
                            }]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        stepSize: 1
                                    }
                                }
                            },
                            plugins: {
                                legend: {
                                    display: false
                                }
                            }
                        }
                    });
                </script>
            }
            <h1 class="mb-4">Dashboard</h1>

            <div class="row">
                <div class="col-md-3 col-sm-6">
                    <div class="card bg-primary text-white mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Total Bugs</h5>
                            <h2 id="totalBugs">@(ViewBag.TotalBugs ?? 0)</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6">
                    <div class="card bg-warning text-white mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Open Bugs</h5>
                            <h2 id="openBugs">@(ViewBag.OpenBugs ?? 0)</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6">
                    <div class="card bg-info text-white mb-4">
                        <div class="card-body">
                            <h5 class="card-title">In Progress</h5>
                            <h2 id="inProgressBugs">@(ViewBag.InProgressBugs ?? 0)</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6">
                    <div class="card bg-success text-white mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Resolved</h5>
                            <h2 id="resolvedBugs">@(ViewBag.ResolvedBugs ?? 0)</h2>
                        </div>
                    </div>
                </div>
            </div>
            <div id="loading" style="display: none;">Loading...</div>
            <div id="dashboard-content" style="display: none;">
                <!-- Existing dashboard content here -->
            </div>

            @section Scripts {
                <script>
                    function fetchData() {
                        document.getElementById('loading').style.display = 'block';
                        document.getElementById('dashboard-content').style.display = 'none';

                        fetch('/api/dashboard-data')
                            .then(response => response.json())
                            .then(data => {
                                // Update ViewBag data with fetched data
                                updateDashboard(data);
                                document.getElementById('loading').style.display = 'none';
                                document.getElementById('dashboard-content').style.display = 'block';
                            })
                            .catch(error => {
                                console.error('Error fetching data:', error);
                                document.getElementById('loading').style.display = 'none';
                                document.getElementById('dashboard-content').style.display = 'block';
                            });
                    }

                    function updateDashboard(data) {
                        // Update the dashboard with new data
                        document.getElementById('totalBugs').innerText = data.totalBugs;
                        document.getElementById('openBugs').innerText = data.openBugs;
                        document.getElementById('inProgressBugs').innerText = data.inProgressBugs;
                        document.getElementById('resolvedBugs').innerText = data.resolvedBugs;

                        // Update charts
                        statusChart.data.labels = data.statusLabels;
                        statusChart.data.datasets[0].data = data.statusData;
                        statusChart.update();

                        severityChart.data.labels = data.severityLabels;
                        severityChart.data.datasets[0].data = data.severityData;
                        severityChart.update();
                    }

                    // Fetch data initially and set interval for periodic refresh
                    fetchData();
                    setInterval(fetchData, 60000); // Refresh every 60 seconds
                </script>
            }
            <div class="card-body">
                <h5 class="card-title">Open Bugs</h5>
                <h2>@(ViewBag.OpenBugs ?? 0)</h2>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-info text-white mb-4">
            <div class="card-body">
                <h5 class="card-title">In Progress</h5>
                <h2>@(ViewBag.InProgressBugs ?? 0)</h2>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-success text-white mb-4">
            <div class="card-body">
                <h5 class="card-title">Resolved</h5>
                <h2>@(ViewBag.ResolvedBugs ?? 0)</h2>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header">
                Bugs by Status
            </div>
            <div class="card-body">
                <canvas id="statusChart"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header">
                Bugs by Severity
            </div>
            <div class="card-body">
                <canvas id="severityChart"></canvas>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Status Chart
        var statusCtx = document.getElementById('statusChart').getContext('2d');
        var statusLabels = @Html.Raw(Json.Serialize(ViewBag.StatusLabels ?? new List<string>()));
        var statusData = @Html.Raw(Json.Serialize(ViewBag.StatusData ?? new List<int>()));

        var statusChart = new Chart(statusCtx, {
            type: 'pie',
            data: {
                labels: statusLabels,
                datasets: [{
                    data: statusData,
                    backgroundColor: [
                        '#dc3545', // Open - danger
                        '#ffc107', // In Progress - warning
                        '#0dcaf0', // Under Review - info
                        '#198754', // Resolved - success
                        '#6c757d'  // Closed - secondary
                    ]
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });

        // Severity Chart
        var severityCtx = document.getElementById('severityChart').getContext('2d');
        var severityLabels = @Html.Raw(Json.Serialize(ViewBag.SeverityLabels ?? new List<string>()));
        var severityData = @Html.Raw(Json.Serialize(ViewBag.SeverityData ?? new List<int>()));

        var severityChart = new Chart(severityCtx, {
            type: 'bar',
            data: {
                labels: severityLabels,
                datasets: [{
                    label: 'Bugs by Severity',
                    data: severityData,
                    backgroundColor: [
                        '#6c757d', // Low - secondary
                        '#0dcaf0', // Medium - info
                        '#ffc107', // High - warning
                        '#dc3545'  // Critical - danger
                    ]
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
    </script>
}