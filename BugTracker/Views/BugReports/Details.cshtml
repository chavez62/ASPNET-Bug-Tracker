@model BugTracker.Models.BugReport
@using BugTracker.Models
@using BugTracker.Models.Enums
@using System
@using System.IO
@using System.Linq
@using System.Text.Json

@{
    ViewData["Title"] = $"Bug #{Model.Id} Details";
}

@section Styles {
    <style>
        .breadcrumb-modern {
            padding: .75rem 1.1rem;
            background: var(--bs-body-bg);
            border-radius: .9rem;
            border: 1px solid var(--bs-border-color-translucent, rgba(15, 23, 42, 0.08));
            box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.5);
        }

        .breadcrumb-modern .breadcrumb-item + .breadcrumb-item::before {
            color: var(--bs-secondary-color);
            content: '>';
            margin-right: .6rem;
            margin-left: .4rem;
        }

        .breadcrumb-modern .breadcrumb-link {
            display: inline-flex;
            align-items: center;
            gap: .4rem;
            text-decoration: none;
            color: inherit;
            font-weight: 500;
        }

        .breadcrumb-modern .breadcrumb-link:hover,
        .breadcrumb-modern .breadcrumb-link:focus {
            color: var(--bs-primary);
        }

        .breadcrumb-modern .breadcrumb-item.active {
            color: var(--bs-primary);
            font-weight: 600;
        }

        .breadcrumb-pill {
            display: inline-flex;
            align-items: center;
            gap: .4rem;
            padding: .3rem .85rem;
            border-radius: 999px;
            background: rgba(15, 23, 42, 0.03);
            border: 1px solid var(--bs-border-color-translucent, rgba(15, 23, 42, 0.08));
            font-weight: 500;
            color: var(--bs-secondary-color);
        }

        .breadcrumb-pill i {
            color: var(--bs-primary);
        }

        .summary-card {
            border-radius: 1.25rem;
            border: none;
            background: var(--bs-body-bg);
            box-shadow: 0 .75rem 2rem rgba(15, 23, 42, 0.08);
        }

        .summary-card .summary-badges {
            display: flex;
            flex-wrap: wrap;
            gap: .75rem;
        }

        .summary-title {
            font-size: .85rem;
            text-transform: uppercase;
            letter-spacing: .14em;
            color: var(--bs-secondary-color);
            font-weight: 600;
        }

        .summary-badge {
            display: inline-flex;
            align-items: center;
            gap: .5rem;
            padding: .45rem 1.15rem;
            border-radius: 999px;
            font-weight: 600;
            letter-spacing: .02em;
            border: 1px solid transparent;
        }

        .summary-badge i {
            font-size: 1rem;
        }

        .summary-badge.status-open {
            background: #fee2e2;
            color: #991b1b;
            border-color: rgba(185, 28, 28, 0.18);
        }

        .summary-badge.status-inprogress {
            background: #fef3c7;
            color: #92400e;
            border-color: rgba(146, 64, 14, 0.18);
        }

        .summary-badge.status-underreview {
            background: #e0f2fe;
            color: #075985;
            border-color: rgba(7, 89, 133, 0.18);
        }

        .summary-badge.status-resolved {
            background: #dcfce7;
            color: #166534;
            border-color: rgba(22, 101, 52, 0.18);
        }

        .summary-badge.status-default {
            background: #e5e7eb;
            color: #374151;
            border-color: rgba(55, 65, 81, 0.18);
        }

        .summary-badge.severity-critical {
            background: #fee2e2;
            color: #b91c1c;
            border-color: rgba(185, 28, 28, 0.18);
        }

        .summary-badge.severity-high {
            background: #fef3c7;
            color: #b45309;
            border-color: rgba(180, 83, 9, 0.18);
        }

        .summary-badge.severity-medium {
            background: #e0f2fe;
            color: #0369a1;
            border-color: rgba(3, 105, 161, 0.18);
        }

        .summary-badge.severity-default {
            background: #e5e7eb;
            color: #374151;
            border-color: rgba(55, 65, 81, 0.18);
        }

        .summary-metrics {
            display: flex;
            flex-wrap: wrap;
            gap: 1.5rem;
        }

        .summary-metrics .metric {
            min-width: 160px;
        }

        .summary-metrics .metric small {
            text-transform: uppercase;
            font-size: .75rem;
            letter-spacing: .08em;
            color: var(--bs-secondary-color);
        }

        .summary-metrics .metric span {
            display: block;
            font-weight: 600;
            font-size: 1rem;
        }

        .description-card {
            border-radius: 1rem;
            border: 1px solid var(--bs-border-color-translucent, rgba(15, 23, 42, 0.08));
        }

        .description-body {
            white-space: pre-line;
            max-height: 14rem;
            overflow: hidden;
            position: relative;
            transition: max-height .3s ease;
        }

        .description-body.expanded {
            max-height: none;
        }

        .description-body::after {
            content: '';
            position: absolute;
            left: 0;
            right: 0;
            bottom: 0;
            height: 3rem;
            background: linear-gradient(180deg, rgba(var(--bs-body-bg-rgb, 255, 255, 255), 0), rgba(var(--bs-body-bg-rgb, 255, 255, 255), 1));
            transition: opacity .3s ease;
        }

        .description-body.expanded::after,
        .description-body:not(.truncated)::after {
            opacity: 0;
            pointer-events: none;
        }

        .description-toggle {
            font-weight: 600;
        }

        .meta-card {
            border: 1px solid var(--bs-border-color-translucent, rgba(15, 23, 42, 0.08));
            border-radius: .9rem;
            padding: 1rem 1.25rem;
            background: var(--bs-body-bg);
            box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.4);
        }

        .meta-card small {
            text-transform: uppercase;
            letter-spacing: .08em;
            font-size: .75rem;
            color: var(--bs-secondary-color);
            margin-bottom: .35rem;
            display: block;
        }

        .meta-card .meta-value {
            display: flex;
            gap: .5rem;
            align-items: center;
            justify-content: flex-end;
            text-align: right;
            font-weight: 600;
            color: var(--bs-body-color);
        }

        .attachments-grid .attachment-card {
            border: 1px solid var(--bs-border-color-translucent, rgba(15, 23, 42, 0.08));
            border-radius: 1rem;
            transition: transform .2s ease, box-shadow .2s ease;
            height: 100%;
            min-height: 240px;
        }

        .attachments-grid .attachment-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 .75rem 2rem rgba(15, 23, 42, 0.08);
        }

        .attachments-grid .attachment-card .attachment-footer {
            display: flex;
            flex-direction: column;
            gap: .75rem;
        }

        .attachments-grid .attachment-card .attachment-footer small {
            margin: 0;
        }

        .attachments-grid .attachment-card .attachment-actions {
            display: flex;
            flex-wrap: wrap;
            gap: .5rem;
        }

        .attachments-grid .attachment-card .attachment-actions .btn {
            flex: 1 1 140px;
        }

        @@media (min-width: 768px) {
            .attachments-grid .attachment-card {
                min-height: 260px;
            }

            .attachments-grid .attachment-card .attachment-footer {
                flex-direction: row;
                align-items: center;
                justify-content: space-between;
            }

            .attachments-grid .attachment-card .attachment-actions {
                justify-content: flex-end;
            }

            .attachments-grid .attachment-card .attachment-actions .btn {
                flex: 0 0 auto;
                min-width: 120px;
            }
        }

        .attachment-preview {
            width: 110px;
            height: 110px;
            border-radius: .85rem;
            background: var(--bs-gray-200);
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            flex-shrink: 0;
        }

        .attachment-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        #imagePreviewModal .modal-dialog {
            max-width: min(95vw, 1100px);
        }

        #imagePreviewModal .modal-body {
            max-height: calc(95vh - 4rem);
            padding: 0;
            background: #111;
        }

        #imagePreviewModal .preview-wrapper {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 100%;
            min-height: 60vh;
            padding: 2rem;
        }

        #imagePreviewModal .preview-wrapper img,
        #imagePreviewModal .preview-wrapper iframe,
        #imagePreviewModal .preview-wrapper embed {
            max-width: 100%;
            max-height: calc(95vh - 8rem);
            width: 100%;
            height: 100%;
            object-fit: contain;
            border-radius: 1rem;
            background: #000;
        }

        #imagePreviewModal .preview-wrapper iframe,
        #imagePreviewModal .preview-wrapper embed {
            border: none;
            background: #fff;
        }

        #imagePreviewModal .preview-meta {
            padding: 1rem 1.5rem;
            background: #fff;
            border-top: 1px solid rgba(0, 0, 0, 0.1);
        }

        .timeline-wrapper {
            position: relative;
            padding-left: 1.75rem;
        }

        .timeline-wrapper::before {
            content: '';
            position: absolute;
            left: 15px;
            top: .5rem;
            bottom: .5rem;
            width: 2px;
            background: var(--bs-border-color-translucent, rgba(15, 23, 42, 0.08));
        }

        .timeline-item {
            position: relative;
            padding-bottom: 1.75rem;
        }

        .timeline-item:last-child {
            padding-bottom: 0;
        }

        .timeline-marker {
            position: absolute;
            left: -1.9rem;
            top: .25rem;
            width: 32px;
            height: 32px;
            border-radius: 999px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #fff;
            box-shadow: 0 .5rem 1rem rgba(15, 23, 42, 0.18);
            font-size: 1rem;
        }

        .timeline-marker.status-created { background: #16a34a; }
        .timeline-marker.status-updated { background: #2563eb; }
        .timeline-marker.status-commented { background: #0ea5e9; }
        .timeline-marker.status-default { background: #6b7280; }

        .timeline-content {
            background: var(--bs-body-bg);
            border-radius: 1rem;
            border: 1px solid var(--bs-border-color-translucent, rgba(15, 23, 42, 0.08));
            padding: 1.15rem 1.35rem;
            box-shadow: 0 .25rem .75rem rgba(15, 23, 42, 0.04);
        }

        .quick-action-btn {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 1rem;
            padding: .9rem 1.15rem;
            border-radius: .95rem;
            border: 1px solid var(--bs-border-color-translucent, rgba(15, 23, 42, 0.08));
            background: var(--bs-body-bg);
            transition: transform .2s ease, box-shadow .2s ease;
            width: 100%;
            text-decoration: none;
            color: inherit;
        }

        .quick-action-btn:hover,
        .quick-action-btn:focus {
            transform: translateY(-3px);
            box-shadow: 0 .75rem 2rem rgba(15, 23, 42, 0.08);
            color: inherit;
        }

        .quick-action-btn .icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            background: var(--bs-primary-bg-subtle, rgba(13, 110, 253, 0.15));
            color: var(--bs-primary);
            flex-shrink: 0;
        }

        .toast-container .toast {
            min-width: 280px;
        }

        @@media (max-width: 767.98px) {
            .summary-card {
                box-shadow: 0 .5rem 1.5rem rgba(15, 23, 42, 0.1);
            }

            .summary-card .summary-metrics {
                flex-direction: column;
                gap: 1rem;
            }

            .timeline-wrapper {
                padding-left: 1.25rem;
            }

            .timeline-marker {
                left: -1.55rem;
            }
        }
    </style>
}

<div class="container-fluid">
    <!-- Header Section with Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb breadcrumb-modern align-items-center mb-0">
            <li class="breadcrumb-item">
                <a asp-action="Index" class="breadcrumb-link">
                    <i class="bi bi-collection"></i>
                    <span>Bug Reports</span>
                </a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">
                <span class="breadcrumb-pill">
                    <i class="bi bi-bug"></i>
                    Bug #@Model.Id
                </span>
            </li>
        </ol>
    </nav>

    <div class="row g-4 align-items-center mb-4">
        <div class="col-12 col-lg-8">
            <div class="d-flex align-items-center gap-3">
                <div class="badge text-bg-dark rounded-pill px-3 py-2 fw-semibold">Bug #@Model.Id</div>
                <h1 class="h2 mb-0 fw-bold">@Model.Title</h1>
            </div>
        </div>
        <div class="col-12 col-lg-4">
            @* <div class="d-flex flex-wrap gap-2 justify-content-lg-end">
                <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary d-flex align-items-center gap-2">
                    <i class="bi bi-pencil-square"></i>
                    <span>Edit Bug</span>
                </a>
                <button type="button" class="btn btn-outline-primary d-flex align-items-center gap-2" onclick="openPrintView()">
                    <i class="bi bi-printer"></i>
                    <span>Print</span>
                </button> *@
                <a asp-action="Index" class="btn btn-outline-secondary d-flex align-items-center gap-2">
                    <i class="bi bi-arrow-left"></i>
                    <span>Back to List</span>
                </a>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Main Content Column -->
        <div class="col-lg-8">
            <!-- Summary Card -->
            <div class="summary-card p-4 mb-4">
                <div class="d-flex flex-column flex-md-row justify-content-between gap-4">
                    <div class="flex-grow-1">
                        <div class="summary-badges mb-4">
                            <div class="summary-badge status-@Model.Status.ToString().ToLower()" title="Current status">
                                <i class="bi bi-@(Model.Status switch {
                                    Status.Open => "exclamation-octagon",
                                    Status.InProgress => "gear-fill",
                                    Status.UnderReview => "search",
                                    Status.Resolved => "check-circle",
                                    _ => "circle"
                                })"></i>
                                <span>@Model.Status</span>
                            </div>

                            <div class="summary-badge severity-@(Model.Severity.ToString().ToLower())" title="Severity">
                                <i class="bi bi-@(Model.Severity switch {
                                    Severity.Critical => "lightning-charge-fill",
                                    Severity.High => "slash-lg",
                                    Severity.Medium => "dash-circle",
                                    _ => "info-circle"
                                })"></i>
                                <span>@Model.Severity severity</span>
                            </div>

                            @if (Model.Tags?.Any() == true)
                            {
                                foreach (var tag in Model.Tags.OrderBy(t => t.Name))
                                {
                                    <div class="summary-badge status-default" title="Tag">
                                        <i class="bi bi-tag"></i>
                                        <span>@tag.Name</span>
                                    </div>
                                }
                            }
                        </div>

                        <div class="summary-metrics">
                            <div class="metric">
                                <small>Assignee</small>
                                <span>@(Model.AssignedTo is ApplicationUser assigned
                                    ? string.Join(" ", new[] { assigned.FirstName, assigned.LastName }.Where(s => !string.IsNullOrWhiteSpace(s)))
                                        ?? assigned.Email
                                    : "Unassigned")</span>
                            </div>
                            <div class="metric">
                                <small>Reporter</small>
                                <span>@(Model.CreatedBy is ApplicationUser reporter
                                    ? string.Join(" ", new[] { reporter.FirstName, reporter.LastName }.Where(s => !string.IsNullOrWhiteSpace(s)))
                                        ?? reporter.Email
                                    : "Unknown")</span>
                            </div>
                            <div class="metric">
                                <small>Opened</small>
                                <span>@Model.CreatedDate.ToString("MMM dd, yyyy · HH:mm")</span>
                            </div>
                            @if (Model.UpdatedDate.HasValue)
                            {
                                <div class="metric">
                                    <small>Last Updated</small>
                                    <span>@Model.UpdatedDate.Value.ToString("MMM dd, yyyy · HH:mm")</span>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="d-flex flex-column gap-3 align-self-start align-self-md-center text-md-end">
                        <div class="meta-card">
                            <small>Project</small>
                            <div class="meta-value">
                                <i class="bi bi-kanban"></i>
                                @if (!string.IsNullOrWhiteSpace(Model.Project?.Name))
                                {
                                    <span>@Model.Project.Name</span>
                                }
                                else
                                {
                                    <span class="text-muted fst-italic">No project linked</span>
                                }
                            </div>
                        </div>
                        <div class="meta-card">
                            <small>Reference</small>
                            <div class="meta-value">
                                <i class="bi bi-hash"></i>
                                <span>@Model.Id.ToString("D5")</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Description Card -->
            <div class="description-card p-4 mb-4">
                <div class="d-flex justify-content-between align-items-start mb-3">
                    <div>
                        <span class="summary-title d-block">Description</span>
                        <h4 class="h5 mt-2 mb-0">What happened?</h4>
                    </div>
                    <span class="badge text-bg-secondary">@((Model.Description?.Length ?? 0).ToString()) characters</span>
                </div>

                <div id="descriptionBody" class="description-body" data-description-length="@(Model.Description?.Length ?? 0)">
                    @Html.Raw(System.Web.HttpUtility.HtmlEncode(Model.Description).Replace(Environment.NewLine, "<br />"))
                </div>

                <div class="mt-3">
                    <button id="descriptionToggle" class="btn btn-link description-toggle p-0" type="button" aria-expanded="false">
                        Show full description
                    </button>
                </div>
            </div>

            <!-- Attachments Card -->
            @if (Model.Attachments.Any())
            {
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-paperclip"></i> Attachments
                        </h5>
                        <span class="badge bg-secondary">@Model.Attachments.Count</span>
                    </div>
                    <div class="card-body">
                        <div class="attachments-grid row g-3">
                            @foreach (var attachment in Model.Attachments.OrderByDescending(a => a.UploadDate))
                            {
                                var isImage = attachment.ContentType.StartsWith("image", StringComparison.OrdinalIgnoreCase);
                                string fileExtension = "";
                                if (!string.IsNullOrWhiteSpace(attachment.FileName))
                                {
                                    var ext = System.IO.Path.GetExtension(attachment.FileName);
                                    fileExtension = string.IsNullOrWhiteSpace(ext)
                                        ? string.Empty
                                        : ext.Trim('.').ToUpperInvariant();
                                }

                                var uploadedDate = attachment.UploadDate == default
                                    ? "Unknown"
                                    : attachment.UploadDate.ToLocalTime().ToString("MMM dd, yyyy");

                                <div class="col-12 col-sm-6 col-xl-4">
                                    <div class="attachment-card p-3 h-100 d-flex flex-column gap-3">
                                        <div class="d-flex align-items-center gap-3">
                                            <div class="attachment-preview shadow-sm">
                                                @if (isImage)
                                                {
                                                    <img src="@Url.Action("GetFile", "SecureFile", new { attachmentId = attachment.Id })" alt="Preview of @attachment.FileName" loading="lazy" />
                                                }
                                                else
                                                {
                                                    <i class="bi bi-file-earmark-text fs-3 text-muted"></i>
                                                }
                                            </div>
                                            <div class="flex-grow-1 overflow-hidden">
                                                <div class="d-flex align-items-center gap-2 mb-1 text-truncate">
                                                    <i class="bi bi-@(isImage ? "image" : "file-earmark") text-muted"></i>
                                                    <strong class="text-truncate" title="@attachment.FileName">@attachment.FileName</strong>
                                                </div>
                                                <small class="text-muted text-uppercase">@(string.IsNullOrEmpty(fileExtension) ? "UNKNOWN" : fileExtension) · @((attachment.FileSize / 1024.0).ToString("F1")) KB</small>
                                            </div>
                                        </div>
                                        <div class="attachment-footer d-flex align-items-start justify-content-between mt-auto pt-2 border-top">
                                            <small class="text-muted">Uploaded @uploadedDate</small>
                                            <div class="attachment-actions">
                                                <a href="@Url.Action("GetFile", "SecureFile", new { attachmentId = attachment.Id })"
                                                   class="btn btn-sm btn-outline-primary d-flex align-items-center justify-content-center gap-1" download>
                                                    <i class="bi bi-download"></i>
                                                    <span>Download</span>
                                                </a>
                                                @if (isImage)
                                                {
                                                    <button type="button" class="btn btn-sm btn-outline-secondary d-flex align-items-center justify-content-center gap-1"
                                                            onclick='previewAttachment(@JsonSerializer.Serialize(new {
                                                                url = Url.Action("GetFile", "SecureFile", new { attachmentId = attachment.Id }),
                                                                fileName = attachment.FileName,
                                                                isImage = isImage
                                                            }))'>
                                                        <i class="bi bi-eye"></i>
                                                        <span>Preview</span>
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Activity Timeline -->
            @if (Model.ActivityLogs.Any())
            {
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-clock-history"></i> Activity History
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="timeline-wrapper">
                            @{ var groupedActivities = Model.ActivityLogs
                                    .OrderByDescending(l => l.Timestamp)
                                    .GroupBy(l => l.Timestamp.Date)
                                    .ToList(); }

                            @foreach (var group in groupedActivities)
                            {
                                <div class="mb-4">
                                    <div class="d-inline-flex align-items-center gap-2 px-3 py-1 bg-light rounded-pill mb-3">
                                        <i class="bi bi-calendar-week text-muted"></i>
                                        <span class="fw-semibold">@group.Key.ToString("dddd, MMM dd")</span>
                                    </div>

                                    @foreach (var activity in group)
                                    {
                                        var actionKey = activity.Action?.ToLowerInvariant();
                                        <div class="timeline-item">
                                            <div class="timeline-marker status-@(actionKey switch
                                                {
                                                    "created" => "created",
                                                    "updated" => "updated",
                                                    "commented" => "commented",
                                                    _ => "default"
                                                })">
                                                <i class="bi bi-@(actionKey switch
                                                    {
                                                        "created" => "plus-circle",
                                                        "updated" => "pencil",
                                                        "commented" => "chat-dots",
                                                        _ => "clock-history"
                                                    })"></i>
                                            </div>
                                            <div class="timeline-content">
                                                <div class="d-flex flex-column flex-md-row justify-content-between gap-3">
                                                    <div>
                                                        <h6 class="mb-1 text-capitalize">@activity.Action</h6>
                                                        <p class="mb-2">@activity.Details</p>
                                                    </div>
                                                    <div class="text-md-end">
                                                        <small class="text-muted d-block" title="@activity.Timestamp.ToString("f")">
                                                            @{ var timeDiff = DateTime.UtcNow - activity.Timestamp;
                                                                string timeAgo = timeDiff switch
                                                                {
                                                                    { TotalMinutes: < 1 } => "just now",
                                                                    { TotalHours: < 1 } => $"{Math.Floor(timeDiff.TotalMinutes)}m ago",
                                                                    { TotalDays: < 1 } => $"{Math.Floor(timeDiff.TotalHours)}h ago",
                                                                    { TotalDays: < 7 } => $"{Math.Floor(timeDiff.TotalDays)}d ago",
                                                                    _ => activity.Timestamp.ToString("MMM dd, yyyy · HH:mm")
                                                                }; }
                                                            @timeAgo
                                                        </small>
                                                        <small class="text-muted">
                                                            @if (activity.User != null)
                                                            {
                                                                @(string.Join(" ", new[] { activity.User.FirstName, activity.User.LastName }.Where(s => !string.IsNullOrWhiteSpace(s))) ?? activity.User.Email)
                                                            }
                                                            else
                                                            {
                                                                @:Unknown user
                                                            }
                                                        </small>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Sidebar Column -->
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header border-0 pb-0">
                    <h5 class="card-title mb-1">Quick Actions</h5>
                    <p class="text-muted small mb-0">Take action on this bug.</p>
                </div>
                <div class="card-body d-grid gap-2">
                    <button type="button" class="quick-action-btn" onclick="openCommentModal()">
                        <div class="d-flex align-items-center gap-3">
                            <span class="icon"><i class="bi bi-chat-dots"></i></span>
                            <div>
                                <div class="fw-semibold">Add Comment</div>
                                <small class="text-muted">Provide context or ask a question.</small>
                            </div>
                        </div>
                        <i class="bi bi-chevron-right text-muted"></i>
                    </button>
                    <button type="button" class="quick-action-btn" onclick="copyBugLink()">
                        <div class="d-flex align-items-center gap-3">
                            <span class="icon"><i class="bi bi-link-45deg"></i></span>
                            <div>
                                <div class="fw-semibold">Copy Share Link</div>
                                <small class="text-muted">Share this bug with your team.</small>
                            </div>
                        </div>
                        <i class="bi bi-chevron-right text-muted"></i>
                    </button>
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="quick-action-btn">
                        <div class="d-flex align-items-center gap-3">
                            <span class="icon"><i class="bi bi-pencil-square"></i></span>
                            <div>
                                <div class="fw-semibold">Edit Bug</div>
                                <small class="text-muted">Update status, severity, and more.</small>
                            </div>
                        </div>
                        <i class="bi bi-chevron-right text-muted"></i>
                    </a>
                </div>
            </div>

            <div class="card">
                <div class="card-header border-0 pb-0">
                    <h5 class="card-title mb-1">Share & Export</h5>
                    <p class="text-muted small mb-0">Keep stakeholders in the loop.</p>
                </div>
                <div class="card-body d-grid gap-2">
                    <button type="button" class="quick-action-btn" onclick="openPrintView()">
                        <div class="d-flex align-items-center gap-3">
                            <span class="icon"><i class="bi bi-filetype-pdf"></i></span>
                            <div>
                                <div class="fw-semibold">Print or Save PDF</div>
                                <small class="text-muted">Prepare a snapshot report.</small>
                            </div>
                        </div>
                        <i class="bi bi-chevron-right text-muted"></i>
                    </button>
                    <button type="button" class="quick-action-btn" onclick="openShareModal()">
                        <div class="d-flex align-items-center gap-3">
                            <span class="icon"><i class="bi bi-people"></i></span>
                            <div>
                                <div class="fw-semibold">Share with Team</div>
                                <small class="text-muted">Notify project members.</small>
                            </div>
                        </div>
                        <i class="bi bi-chevron-right text-muted"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Image Preview Modal -->
<div class="modal fade" id="imagePreviewModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Image Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
        <div class="modal-body">
            <div class="preview-wrapper">
                <img id="previewImage" src="" alt="Attachment preview" class="d-none" />
                <iframe id="previewFrame" class="d-none" title="Attachment preview"></iframe>
            </div>
        </div>
        <div class="preview-meta d-flex flex-column flex-md-row align-items-md-center justify-content-between gap-2">
            <div class="text-truncate"><strong id="previewFilename"></strong></div>
            <a id="previewDownload" href="#" class="btn btn-sm btn-outline-primary d-flex align-items-center gap-1" download>
                <i class="bi bi-download"></i>
                <span>Download</span>
            </a>
        </div>
        </div>
    </div>
</div>

<!-- Add Comment Modal -->
<div class="modal fade" id="addCommentModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="commentForm" asp-action="AddComment" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title">Add Comment</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="bugId" value="@Model.Id" />
                    <div class="form-group">
                        <label for="comment" class="form-label">Your Comment</label>
                        <textarea name="comment" id="comment" class="form-control" rows="4" required></textarea>
                    </div>
                    <div id="commentError" class="alert alert-danger d-none" role="alert">
                        Something went wrong. Please try again.
                    </div>
                    <div id="commentSuccess" class="alert alert-success d-none" role="alert">
                        Comment added successfully!
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Comment</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Share Bug Modal -->
<div class="modal fade" id="shareBugModal" tabindex="-1" aria-labelledby="shareBugModalLabel">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="shareBugModalLabel">Share Bug</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="text-muted">Copy the link or send an email invitation.</p>
                <div class="mb-3">
                    <label class="form-label">Bug Link</label>
                    <div class="input-group">
                        <input type="url" id="shareBugLink" class="form-control" readonly>
                        <button class="btn btn-outline-primary" type="button" onclick="copyBugLink(true)">
                            <i class="bi bi-clipboard"></i>
                        </button>
                    </div>
                </div>
                <div>
                    <label for="shareEmail" class="form-label">Notify via Email</label>
                    <div class="input-group">
                        <input type="email" id="shareEmail" class="form-control" placeholder="name@example.com" />
                        <button class="btn btn-primary" type="button" onclick="sendShareEmail()">
                            Send
                        </button>
                    </div>
                    <small class="text-muted">Coming soon: automatic email notifications.</small>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed top-0 end-0 p-3" id="toastContainer"></div>

@section Scripts {
    <script>
        let commentModal;
        let imagePreviewModal;
        let shareModal;
        let currentBugUrl = window.location.href;

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize modals
            commentModal = new bootstrap.Modal(document.getElementById('addCommentModal'));
            imagePreviewModal = new bootstrap.Modal(document.getElementById('imagePreviewModal'));
            shareModal = new bootstrap.Modal(document.getElementById('shareBugModal'));

            initializeDescriptionToggle();
            initializeShareModal();
            setupCopyLinkButtons();

            // Initialize comment form submission
            const commentForm = document.getElementById('commentForm');
            commentForm.addEventListener('submit', async function(e) {
                e.preventDefault();

                const formData = new FormData(this);
                const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
                toggleCommentAlerts();
                setCommentFormState(true);

                try {
                    const response = await fetch(this.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'RequestVerificationToken': antiForgeryToken
                        }
                    });

                    if (response.ok) {
                        const result = await response.json();
                        if (result.success) {
                            showToast('Comment added successfully', 'success');
                            commentModal.hide();
                            window.location.reload();
                        } else {
                            throw new Error(result.message || 'Failed to add comment');
                        }
                    } else {
                        throw new Error('Failed to add comment');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    toggleCommentAlerts(false, error.message);
                    showToast('Failed to add comment. Please try again.', 'danger');
                }
                finally {
                    setCommentFormState(false);
                }
            });
        });

        function previewAttachment(attachment) {
            if (!attachment || !attachment.url) {
                return;
            }

            const imageEl = document.getElementById('previewImage');
            const frameEl = document.getElementById('previewFrame');
            const fileNameEl = document.getElementById('previewFilename');
            const downloadEl = document.getElementById('previewDownload');

            imageEl.classList.add('d-none');
            frameEl.classList.add('d-none');

            fileNameEl.textContent = attachment.fileName || 'Attachment preview';
            downloadEl.href = attachment.url;

            if (attachment.isImage) {
                imageEl.src = attachment.url;
                imageEl.alt = attachment.fileName || 'Attachment image preview';
                imageEl.classList.remove('d-none');
            } else {
                frameEl.src = attachment.url;
                frameEl.title = attachment.fileName || 'Attachment preview';
                frameEl.classList.remove('d-none');
            }

            imagePreviewModal.show();
        }

        function copyBugLink(fromShareModal = false) {
            const url = currentBugUrl;
            navigator.clipboard.writeText(url)
                .then(() => {
                    showToast('Link copied to clipboard!', 'primary');
                    if (fromShareModal) {
                        const linkInput = document.getElementById('shareBugLink');
                        linkInput.classList.add('is-valid');
                        setTimeout(() => linkInput.classList.remove('is-valid'), 1500);
                    }
                })
                .catch(err => {
                    console.error('Failed to copy link:', err);
                    showToast('Failed to copy link. Please try again.', 'danger');
                });
        }

        function openCommentModal() {
            document.getElementById('comment').value = '';
            commentModal.show();
        }

        function openShareModal() {
            const linkInput = document.getElementById('shareBugLink');
            linkInput.value = currentBugUrl;
            linkInput.classList.remove('is-valid');
            document.getElementById('shareEmail').value = '';
            shareModal.show();
        }

        function openPrintView() {
            window.print();
        }

        function sendShareEmail() {
            const email = document.getElementById('shareEmail').value;
            if (!email) {
                showToast('Enter an email address first.', 'warning');
                return;
            }

            showToast('Email notifications are coming soon.', 'info');
        }

        function showToast(message, type = 'primary') {
            const toastContainer = document.getElementById('toastContainer');

            const toastElement = document.createElement('div');
            toastElement.className = `toast align-items-center text-bg-${type} border-0`;
            toastElement.setAttribute('role', 'alert');
            toastElement.setAttribute('aria-live', 'assertive');
            toastElement.setAttribute('aria-atomic', 'true');

            toastElement.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>`;

            toastContainer.appendChild(toastElement);

            const toast = new bootstrap.Toast(toastElement, { delay: 3000 });
            toast.show();

            toastElement.addEventListener('hidden.bs.toast', () => toastElement.remove());
        }

        function initializeDescriptionToggle() {
            const descriptionBody = document.getElementById('descriptionBody');
            const descriptionToggle = document.getElementById('descriptionToggle');
            const maxCollapsedLength = 700;

            if (!descriptionBody || !descriptionToggle) {
                return;
            }

            const descriptionLength = parseInt(descriptionBody.getAttribute('data-description-length'), 10);
            const isTruncated = descriptionLength > maxCollapsedLength;

            if (!isTruncated) {
                descriptionToggle.classList.add('d-none');
                descriptionBody.classList.remove('truncated');
                return;
            }

            descriptionBody.classList.add('truncated');

            descriptionToggle.addEventListener('click', () => {
                const expanded = descriptionBody.classList.toggle('expanded');
                descriptionToggle.textContent = expanded ? 'Show less' : 'Show full description';
                descriptionToggle.setAttribute('aria-expanded', expanded.toString());
            });
        }

        function initializeShareModal() {
            setupCopyLinkButtons();
        }

        function setupCopyLinkButtons() {
            document.querySelectorAll('[data-action="copy-link"]').forEach(button => {
                button.addEventListener('click', () => copyBugLink(false));
            });
        }

        function toggleCommentAlerts(isSuccess = true, message = '') {
            const successAlert = document.getElementById('commentSuccess');
            const errorAlert = document.getElementById('commentError');

            successAlert?.classList.add('d-none');
            errorAlert?.classList.add('d-none');

            if (isSuccess === false && errorAlert) {
                if (message) {
                    errorAlert.textContent = message;
                }
                errorAlert.classList.remove('d-none');
            } else if (isSuccess === true && successAlert) {
                successAlert.classList.remove('d-none');
            }
        }

        function setCommentFormState(isSubmitting) {
            const submitButton = document.querySelector('#commentForm button[type="submit"]');
            if (!submitButton) return;

            submitButton.disabled = isSubmitting;
            submitButton.innerHTML = isSubmitting
                ? '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Saving...'
                : 'Add Comment';
        }
    </script>
}
