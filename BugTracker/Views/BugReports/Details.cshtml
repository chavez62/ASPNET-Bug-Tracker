@model BugTracker.Models.BugReport
@using BugTracker.Models.Enums

@{
    ViewData["Title"] = $"Bug #{Model.Id} Details";
}

<div class="container-fluid">
    <!-- Header Section with Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-action="Index">Bug Reports</a></li>
            <li class="breadcrumb-item active">Bug #@Model.Id</li>
        </ol>
    </nav>

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>
            <span class="badge bg-secondary me-2">#@Model.Id</span>
            @Model.Title
        </h1>
        <div class="btn-group">
            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">
                <i class="bi bi-pencil"></i> Edit
            </a>
            <button type="button" class="btn btn-outline-primary" onclick="window.print()">
                <i class="bi bi-printer"></i> Print
            </button>
            <a asp-action="Index" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i> Back
            </a>
        </div>
    </div>

    <div class="row">
        <!-- Main Content Column -->
        <div class="col-md-8">
            <!-- Status Card -->
            <div class="card mb-4">
                <div class="card-header bg-light">
                    <div class="row align-items-center">
                        <div class="col-auto">
                            <span class="badge bg-@(Model.Status switch {
                                Status.Open => "danger",
                                Status.InProgress => "warning",
                                Status.UnderReview => "info",
                                Status.Resolved => "success",
                                _ => "secondary"
                            }) px-3 py-2">@Model.Status</span>
                        </div>
                        <div class="col-auto">
                            <span class="badge bg-@(Model.Severity switch {
                                Severity.Critical => "danger",
                                Severity.High => "warning",
                                Severity.Medium => "info",
                                _ => "secondary"
                            }) px-3 py-2">@Model.Severity</span>
                        </div>
                        <div class="col text-end">
                            <small class="text-muted">
                                Created @Model.CreatedDate.ToString("MMM dd, yyyy HH:mm")
                            </small>
                        </div>
                    </div>
                </div>

                <div class="card-body">
                    <h5 class="card-title">Description</h5>
                    <div class="description-content mb-4">
                        @Html.Raw(System.Web.HttpUtility.HtmlEncode(Model.Description).Replace(Environment.NewLine, "<br />"))
                    </div>

                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-person-circle text-muted me-2"></i>
                                <div>
                                    <small class="text-muted d-block">Created By</small>
                                    <strong>@Model.CreatedBy?.FirstName @Model.CreatedBy?.LastName</strong>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-person-check text-muted me-2"></i>
                                <div>
                                    <small class="text-muted d-block">Assigned To</small>
                                    <strong>@Model.AssignedTo?.FirstName @Model.AssignedTo?.LastName</strong>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Attachments Card -->
            @if (Model.Attachments.Any())
            {
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-paperclip"></i> Attachments
                        </h5>
                        <span class="badge bg-secondary">@Model.Attachments.Count</span>
                    </div>
                    <div class="card-body">
                        <div class="list-group">
                            @foreach (var attachment in Model.Attachments)
                            {
                                <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                    <div>
                                        <i class="bi @(attachment.ContentType.StartsWith("image") ? "bi-image" : "bi-file-text")"></i>
                                        <span class="ms-2">@attachment.FileName</span>
                                        <small class="text-muted ms-2">
                                            (@(attachment.FileSize / 1024.0).ToString("F1") KB)
                                        </small>
                                    </div>
                                    <div class="btn-group">
                                        <a href="@Url.Action("GetFile", "SecureFile", new { attachmentId = attachment.Id })"
                                           class="btn btn-sm btn-outline-primary" download>
                                            <i class="bi bi-download"></i>
                                        </a>
                                        @if (attachment.ContentType.StartsWith("image"))
                                        {
                                            <button type="button" class="btn btn-sm btn-outline-secondary"
                                                    onclick="previewImage('@Url.Action("GetFile", "SecureFile", new { attachmentId = attachment.Id })')">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Activity Timeline -->
            @if (Model.ActivityLogs.Any())
            {
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-clock-history"></i> Activity History
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="timeline">
                            @foreach (var activity in Model.ActivityLogs.OrderByDescending(l => l.Timestamp))
                            {
                                <div class="d-flex gap-3 mb-4">
                                    <div class="flex-shrink-0">
                                        <span class="timeline-icon bg-@(activity.Action switch {
                                "Created" => "success",
                                "Updated" => "primary",
                                "Commented" => "info",
                                _ => "secondary"
                            }) text-white rounded-circle p-2">
                                            <i class="bi bi-@(activity.Action switch {
                                    "Created" => "plus-circle",
                                    "Updated" => "pencil",
                                    "Commented" => "chat-dots",
                                    _ => "clock-history"
                                })"></i>
                                        </span>
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <h6 class="mb-0">@activity.Action</h6>
                                            <small class="text-muted" title="@activity.Timestamp.ToString("f")">
                                                @{
                                                    var timeDiff = DateTime.UtcNow - activity.Timestamp;
                                                    string timeAgo = timeDiff switch
                                                    {
                                                        { TotalMinutes: < 1 } => "just now",
                                                        { TotalHours: < 1 } => $"{Math.Floor(timeDiff.TotalMinutes)}m ago",
                                                        { TotalDays: < 1 } => $"{Math.Floor(timeDiff.TotalHours)}h ago",
                                                        { TotalDays: < 7 } => $"{Math.Floor(timeDiff.TotalDays)}d ago",
                                                        _ => activity.Timestamp.ToString("MMM dd, yyyy")
                                                    };
                                                }
                                                @timeAgo
                                            </small>
                                        </div>
                                        <p class="mb-1">@activity.Details</p>
                                        @if (activity.User != null)
                                        {
                                            <small class="text-muted">
                                                By @(activity.User.FirstName ?? activity.User.Email) @activity.User.LastName
                                            </small>
                                        }
                                        else
                                        {
                                            <small class="text-muted">By Unknown User</small>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Sidebar Column -->
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">Quick Actions</h5>
                </div>
                <div class="list-group list-group-flush">
                    <button type="button" class="list-group-item list-group-item-action"
                            onclick="openCommentModal()">
                        <i class="bi bi-chat-dots"></i> Add Comment
                    </button>
                    <button type="button" class="list-group-item list-group-item-action"
                            onclick="copyBugLink()">
                        <i class="bi bi-link"></i> Copy Link
                    </button>
                    <a asp-action="Edit" asp-route-id="@Model.Id"
                       class="list-group-item list-group-item-action">
                        <i class="bi bi-pencil"></i> Edit Bug
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Image Preview Modal -->
<div class="modal fade" id="imagePreviewModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Image Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
                <img id="previewImage" src="" class="img-fluid" />
            </div>
        </div>
    </div>
</div>

<!-- Add Comment Modal -->
<div class="modal fade" id="addCommentModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="commentForm" asp-action="AddComment" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title">Add Comment</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="bugId" value="@Model.Id" />
                    <div class="form-group">
                        <label for="comment" class="form-label">Your Comment</label>
                        <textarea name="comment" id="comment" class="form-control" rows="4" required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Comment</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let commentModal;
        let imagePreviewModal;

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize modals
            commentModal = new bootstrap.Modal(document.getElementById('addCommentModal'));
            imagePreviewModal = new bootstrap.Modal(document.getElementById('imagePreviewModal'));

            // Initialize comment form submission
            const commentForm = document.getElementById('commentForm');
            commentForm.addEventListener('submit', async function(e) {
                e.preventDefault();

                const formData = new FormData(this);
                const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

                try {
                    const response = await fetch(this.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'RequestVerificationToken': antiForgeryToken
                        }
                    });

                    if (response.ok) {
                        const result = await response.json();
                        if (result.success) {
                            commentModal.hide();
                            window.location.reload();
                        }
                    } else {
                        throw new Error('Failed to add comment');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Failed to add comment. Please try again.');
                }
            });
        });

        function previewImage(path) {
            document.getElementById('previewImage').src = path;
            imagePreviewModal.show();
        }

        function copyBugLink() {
            const url = window.location.href;
            navigator.clipboard.writeText(url)
                .then(() => {
                    alert('Link copied to clipboard!');
                })
                .catch(err => {
                    console.error('Failed to copy link:', err);
                    alert('Failed to copy link. Please try again.');
                });
        }

        function openCommentModal() {
            document.getElementById('comment').value = '';
            commentModal.show();
        }
    </script>
}
