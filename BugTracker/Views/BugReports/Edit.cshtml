@model BugTracker.Models.BugReport
@using BugTracker.Models.Enums

@{
    ViewData["Title"] = "Edit Bug Report";
}

@section Styles {
    <style>
        .breadcrumb-modern {
            padding: .75rem 1.1rem;
            background: var(--bs-body-bg);
            border-radius: .9rem;
            border: 1px solid var(--bs-border-color-translucent, rgba(15, 23, 42, 0.08));
            box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.5);
        }

        .breadcrumb-modern .breadcrumb-item+.breadcrumb-item::before {
            color: var(--bs-secondary-color);
            content: '>';
            margin-right: .6rem;
            margin-left: .4rem;
        }

        .breadcrumb-modern .breadcrumb-link {
            display: inline-flex;
            align-items: center;
            gap: .4rem;
            text-decoration: none;
            color: inherit;
            font-weight: 500;
        }

        .breadcrumb-modern .breadcrumb-link:hover,
        .breadcrumb-modern .breadcrumb-link:focus {
            color: var(--bs-primary);
        }

        .breadcrumb-modern .breadcrumb-item.active {
            color: var(--bs-primary);
            font-weight: 600;
        }

        .breadcrumb-pill {
            display: inline-flex;
            align-items: center;
            gap: .4rem;
            padding: .3rem .85rem;
            border-radius: 999px;
            background: rgba(15, 23, 42, 0.03);
            border: 1px solid var(--bs-border-color-translucent, rgba(15, 23, 42, 0.08));
            font-weight: 500;
            color: var(--bs-secondary-color);
        }

        .breadcrumb-pill i {
            color: var(--bs-primary);
        }
    </style>
}

<div class="container-fluid">
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1065" id="toastContainer"></div>
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb breadcrumb-modern align-items-center mb-0">
            <li class="breadcrumb-item">
                <a asp-action="Index" class="breadcrumb-link">
                    <i class="bi bi-collection"></i>
                    <span>Bug Reports</span>
                </a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">
                <span class="breadcrumb-pill">
                    <i class="bi bi-pencil-square"></i>
                    Edit Bug #@Model.Id
                </span>
            </li>
        </ol>
    </nav>

    <h1 class="mb-4">Edit Bug Report #@Model.Id</h1>

    <form asp-action="Edit" method="post" enctype="multipart/form-data">
        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="CreatedById" />
        <input type="hidden" asp-for="CreatedDate" />

        <partial name="_Form" model="@Model" />

        <div class="form-group mt-4">
            <button type="submit" class="btn btn-primary">
                <i class="bi bi-save"></i> Save Changes
            </button>
            <a asp-action="Index" class="btn btn-secondary">
                <i class="bi bi-arrow-left"></i> Back to List
            </a>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        // Initialize tag selection with Select2
        (function () {
            const createToast = (message, type = 'primary') => {
                const toastContainer = document.getElementById('toastContainer');
                if (!toastContainer || typeof bootstrap === 'undefined') {
                    return null;
                }

                const toastEl = document.createElement('div');
                toastEl.className = `toast align-items-center text-bg-${type} border-0`;
                toastEl.setAttribute('role', 'alert');
                toastEl.setAttribute('aria-live', 'assertive');
                toastEl.setAttribute('aria-atomic', 'true');

                toastEl.innerHTML = `
                            <div class="d-flex">
                                <div class="toast-body">
                                    ${message}
                                </div>
                                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                            </div>`;

                toastContainer.appendChild(toastEl);
                const toast = new bootstrap.Toast(toastEl, { delay: 3000 });
                toast.show();
                toastEl.addEventListener('hidden.bs.toast', () => toastEl.remove());

                return toast;
            };

            const initSelect2 = () => {
                const tagSelect = $('#tagSelect');
                if (!tagSelect.length || typeof $.fn.select2 !== 'function') {
                    return;
                }

                tagSelect.select2({
                    theme: 'bootstrap-5',
                    placeholder: 'Select tags...',
                    allowClear: true,
                    ajax: {
                        url: '@Url.Action("GetTags", "Tags")',
                        dataType: 'json',
                        delay: 250,
                        data: function (params) {
                            return {
                                term: params.term
                            };
                        },
                        processResults: function (data) {
                            return {
                                results: data.map(function (tag) {
                                    return {
                                        id: tag.id,
                                        text: tag.text,
                                        color: tag.color
                                    };
                                })
                            };
                        },
                        cache: true
                    },
                    templateResult: function (tag) {
                        if (!tag.id) return tag.text;

                        var $tag = $(
                            '<span><span class="badge me-2" style="background-color: ' + tag.color + '; color: ' +
                            (tag.color === '#FFFFFF' || tag.color === '#ffffff' ? '#000000' : '#FFFFFF') + ';">' +
                            tag.text + '</span></span>'
                        );
                        return $tag;
                    },
                    templateSelection: function (tag) {
                        if (!tag.id) return tag.text;

                        return $(
                            '<span class="badge me-1" style="background-color: ' + tag.color + '; color: ' +
                            (tag.color === '#FFFFFF' || tag.color === '#ffffff' ? '#000000' : '#FFFFFF') + ';">' +
                            tag.text + '</span>'
                        );
                    }
                });
            };

            const bindAttachmentDeletion = () => {
                const attachmentContainer = document.getElementById('existingAttachments');
                if (!attachmentContainer) {
                    return;
                }

                attachmentContainer.addEventListener('submit', async (event) => {
                    const form = event.target.closest('.delete-attachment-form');
                    if (!form) {
                        return;
                    }

                    event.preventDefault();

                    const submitButton = form.querySelector('button[type="submit"]');
                    const originalButtonText = submitButton.innerHTML;
                    submitButton.disabled = true;
                    submitButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Removing';

                    try {
                        const formData = new FormData(form);
                        const response = await fetch(form.action, {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });

                        if (!response.ok) {
                            throw new Error(`Request failed with status ${response.status}`);
                        }

                        const result = await response.json();

                        if (result.success) {
                            const attachmentItem = form.closest('.attachment-item');
                            if (attachmentItem) {
                                attachmentItem.remove();
                            }

                            if (!attachmentContainer.querySelector('.attachment-item')) {
                                attachmentContainer.parentElement.remove();
                            }

                            createToast('Attachment deleted successfully.', 'success');
                        } else {
                            throw new Error(result.message || 'Failed to delete attachment.');
                        }
                    } catch (error) {
                        console.error('Attachment deletion failed:', error);
                        createToast('Failed to delete attachment. Please try again.', 'danger');
                    } finally {
                        submitButton.disabled = false;
                        submitButton.innerHTML = originalButtonText;
                    }
                });
            };

            document.addEventListener('DOMContentLoaded', () => {
                initSelect2();
                bindAttachmentDeletion();
            });
        })();
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}